/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // Core dependencies for library functionality.
    implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
    implementation group: 'com.github.rholder', name: 'guava-retrying', version: '2.0.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.13'
    implementation group: 'io.netty', name: 'netty-common', version: '4.1.110.Final'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    // Test-only utilities.
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.16.1'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    testImplementation group: 'org.databene', name: 'contiperf', version: '2.2.0'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}
